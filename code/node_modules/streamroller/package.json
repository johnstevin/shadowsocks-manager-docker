{
  "_args": [
    [
      {
        "raw": "streamroller@^0.4.0",
        "scope": null,
        "escapedName": "streamroller",
        "name": "streamroller",
        "rawSpec": "^0.4.0",
        "spec": ">=0.4.0 <0.5.0",
        "type": "range"
      },
      "/root/.nvm/versions/node/v7.10.0/lib/node_modules/shadowsocks-manager/node_modules/log4js"
    ]
  ],
  "_from": "streamroller@>=0.4.0 <0.5.0",
  "_id": "streamroller@0.4.1",
  "_inCache": true,
  "_location": "/shadowsocks-manager/streamroller",
  "_nodeVersion": "6.9.4",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/streamroller-0.4.1.tgz_1494559251974_0.3110929662361741"
  },
  "_npmUser": {
    "name": "csausdev",
    "email": "gareth.nomiddlename@gmail.com"
  },
  "_npmVersion": "3.10.10",
  "_phantomChildren": {},
  "_requested": {
    "raw": "streamroller@^0.4.0",
    "scope": null,
    "escapedName": "streamroller",
    "name": "streamroller",
    "rawSpec": "^0.4.0",
    "spec": ">=0.4.0 <0.5.0",
    "type": "range"
  },
  "_requiredBy": [
    "/shadowsocks-manager/log4js"
  ],
  "_resolved": "https://registry.npmjs.org/streamroller/-/streamroller-0.4.1.tgz",
  "_shasum": "d435bd5974373abd9bd9068359513085106cc05f",
  "_shrinkwrap": null,
  "_spec": "streamroller@^0.4.0",
  "_where": "/root/.nvm/versions/node/v7.10.0/lib/node_modules/shadowsocks-manager/node_modules/log4js",
  "author": {
    "name": "Gareth Jones",
    "email": "gareth.nomiddlename@gmail.com"
  },
  "bugs": {
    "url": "https://github.com/nomiddlename/streamroller/issues"
  },
  "dependencies": {
    "date-format": "^0.0.0",
    "debug": "^0.7.2",
    "mkdirp": "^0.5.1",
    "readable-stream": "^1.1.7"
  },
  "description": "file streams that roll over when size limits, or dates are reached",
  "devDependencies": {
    "async": "^0.2.9",
    "jshint": "^2.9.4",
    "mocha": "^1.12.0",
    "sandboxed-module": "^0.2.1",
    "should": "^1.2.2"
  },
  "directories": {
    "test": "test"
  },
  "dist": {
    "shasum": "d435bd5974373abd9bd9068359513085106cc05f",
    "tarball": "https://registry.npmjs.org/streamroller/-/streamroller-0.4.1.tgz"
  },
  "engines": {
    "node": ">=0.12.0"
  },
  "gitHead": "ece35d7d86c87c04ff09e8604accae81cf36a0ce",
  "homepage": "https://github.com/nomiddlename/streamroller#readme",
  "keywords": [
    "stream",
    "rolling"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "maintainers": [
    {
      "name": "csausdev",
      "email": "gareth.jones@sensis.com.au"
    }
  ],
  "name": "streamroller",
  "optionalDependencies": {},
  "readme": "streamroller\n============\n\nnode.js file streams that roll over when they reach a maximum size, or a date/time.\n\n        npm install streamroller\n\n## usage\n\n        var rollers = require('streamroller');\n        var stream = new rollers.RollingFileStream('myfile', 1024, 3);\n        stream.write(\"stuff\");\n        stream.end();\n\nThe streams behave the same as standard node.js streams, except that when certain conditions are met they will rename the current file to a backup and start writing to a new file.\n\n### new RollingFileStream(filename [, maxSize, numBackups, options])\n* `filename` (String)\n* `maxSize` - the size in bytes to trigger a rollover, if not provided this defaults to MAX_SAFE_INTEGER and the stream will not roll.\n* `numBackups` - the number of old files to keep\n* `options` - Object\n  * `encoding` - defaults to 'utf8'\n  * `mode` - defaults to 0644\n  * `flags` - defaults to 'a'\n  * `compress` - (boolean) defaults to `false` - compress the backup files using gzip (files will have `.gz` extension).\n\nThis returns a `WritableStream`. When the current file being written to (given by `filename`) gets up to or larger than `maxSize`, then the current file will be renamed to `filename.1` and a new file will start being written to. Up to `numBackups` of old files are maintained, so if `numBackups` is 3 then there will be 4 files:\n<pre>\n     filename\n     filename.1\n     filename.2\n     filename.3\n</pre>\nWhen filename size >= maxSize then:\n<pre>\n     filename -> filename.1\n     filename.1 -> filename.2\n     filename.2 -> filename.3\n     filename.3 gets overwritten\n     filename is a new file\n</pre>\n\n### new DateRollingFileStream(filename, pattern, options)\n* `filename` (String)\n* `pattern` (String) - the date pattern to trigger rolling (see below)\n* `options` - Object\n\t* `encoding` - defaults to 'utf8'\n\t* `mode` defaults to 0644\n\t* `flags` defaults to 'a'\n    * `compress` - (boolean) compress the backup files, defaults to false\n\t* `alwaysIncludePattern` - (boolean) extend the initial file with the pattern, defaults to false\n\n\nThis returns a `WritableStream`. When the current time, formatted as `pattern`, changes then the current file will be renamed to `filename.formattedDate` where `formattedDate` is the result of processing the date through the pattern, and a new file will begin to be written. Streamroller uses [date-format](http://github.com/nomiddlename/date-format) to format dates, and the `pattern` should use the date-format format. e.g. with a `pattern` of `\".yyyy-MM-dd\"`, and assuming today is August 29, 2013 then writing to the stream today will just write to `filename`. At midnight, `filename` will be renamed to `filename.2013-08-29` and a new `filename` will be created. If `options.alwaysIncludePattern` is true, then the initial file will be `filename.2013-08-29` and no renaming will occur at midnight, but a new file will be written to with the name `filename.2013-08-30`.\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/nomiddlename/streamroller.git"
  },
  "scripts": {
    "pretest": "jshint lib/ test/",
    "test": "mocha"
  },
  "version": "0.4.1"
}
